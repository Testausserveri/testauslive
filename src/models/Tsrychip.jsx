/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.3 public/tsrychip.glb --transform 
Files: public/tsrychip.glb [8.24MB] > C:\cygwin64\home\eerop\react-three-fuiber\tsrychip-transformed.glb [374.22KB] (95%)
*/

import React, { useEffect } from 'react'
import { useGraph } from '@react-three/fiber'
import { useGLTF } from '@react-three/drei'
import { SkeletonUtils } from 'three-stdlib'

export function Tsrychip(props) {
  const { scene } = useGLTF('/tsrychip-transformed.glb')
  const clone = React.useMemo(() => SkeletonUtils.clone(scene), [scene])
  const { nodes, materials } = useGraph(clone)
  return (
    <group {...props} dispose={null}>
      <directionalLight intensity={7.9} decay={2} color="#003eff" position={[-2.133, 1.808, 3.142]} rotation={[-0.704, -0.712, 1.281]} target={nodes.Spot001.target}>
        <primitive object={nodes.Spot001.target} position={[0, 0, -1]} />
      </directionalLight>
      <directionalLight intensity={9} decay={2} color="#3f6ffd" position={[2.482, -2.399, 3.623]} rotation={[-0.607, 0.166, 1.256]} target={nodes.Spot002.target}>
        <primitive object={nodes.Spot002.target} position={[0, 0, -1]} />
      </directionalLight>
      <mesh geometry={nodes.Plane000_1.geometry} material={materials.PaletteMaterial001} material-emissiveIntensity={0} position={[0.923, 0.069, -0.014]} rotation={[2.797, -0.136, 0.378]} scale={0.628} />
      <mesh geometry={nodes.Gold1001.geometry} material={materials.PaletteMaterial002} material-emissiveIntensity={10} material-opacity={1} material-transparent={true} position={[1.712, 0.354, -0.243]} rotation={[2.797, -0.136, 0.378]} scale={0.132} />
    {/*}  <mesh geometry={nodes.Plane118.geometry} material={materials.InteDog} position={[0.93, 0.088, 0.043]} rotation={[0.513, 0, 0]} scale={0.717} />*/}
    </group>
  )
}

useGLTF.preload('/tsrychip-transformed.glb')
